use super::Day;
use eyre::{eyre, Result};
use lazy_static::lazy_static;
use maplit::hashmap;
use std::collections::HashMap;
use std::fs::read_to_string;

const OPEN: &str = "({[<";
lazy_static! {
    static ref CLOSE_MAP: HashMap<char, char> =
        hashmap! {'{'=> '}', '('=> ')', '['=> ']', '<'=> '>'};
}

pub struct Day10 {}

impl Day10 {
    pub fn new() -> Self {
        Self {}
    }

    fn parse_input(&mut self, raw_input: &str) -> Result<Vec<Vec<char>>> {
        Ok(raw_input
            .lines()
            .map(|l| l.chars().collect::<Vec<_>>())
            .collect::<Vec<_>>())
    }

    fn process_line(&self, stack: &mut Vec<char>, line: &Vec<char>) -> Result<()> {
        for &ch in line {
            if OPEN.contains(ch) {
                stack.push(ch);
            } else {
                let matchable = stack.pop().unwrap();
                if ch != matchable {
                    // corrupt line
                    println!("corrupt on char {:?}!={:?}", ch, matchable);
                    return Err(eyre!("corrupt"));
                }
            }
        }
        Ok(())
    }

    fn part_1(&mut self, raw_input: &str) -> Result<()> {
        let input = self.parse_input(raw_input)?;
        let mut stack = vec![];
        for (i,line) in input.enumerate() {
            match self.process_line(&mut stack, &line) {
                Ok(_) => println!("ok"),
                Err(_) => println!("err"),
            }
        }

        Ok(())
    }

    fn part_2(&mut self, raw_input: &str) -> Result<()> {
        Ok(())
    }
}

impl Day for Day10 {
    fn run(&mut self) -> Result<()> {
        println!("sample");
        let sample_raw_input = read_to_string("src/data/day10-sample")?;
        self.part_1(&sample_raw_input)?;
        println!("part 1");
        let raw_input = read_to_string("src/data/day10")?;
        self.part_1(&raw_input)?;

        println!("part 2!");
        self.part_2(&sample_raw_input)?;
        self.part_2(&raw_input)?;
        Ok(())
    }
}
